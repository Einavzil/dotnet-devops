name: CI/CD Main Branch

on:
  push:
    branches: [ main ]

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build
      
    - name: Check code format
      run: dotnet format --verify-no-changes

    - name: Get latest release version
      id: get_latest_release
      run: |
        latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
        echo "Latest tag: $latest_tag"
        if [ -z "$latest_tag" ]; then
          new_version="v1.0.0"
        else
          new_version=$(echo $latest_tag | awk -F. -v OFS=. '{$NF++;print}')
        fi
        echo "New version: $new_version"
        echo "::set-output name=new_version::$new_version"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ steps.get_latest_release.outputs.new_version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_latest_release.outputs.new_version }}
        release_name: Release ${{ steps.get_latest_release.outputs.new_version }}
        draft: false
        prerelease: false

  deploy-testing:
    needs: build-image
    environment: testing
    runs-on: ubuntu-latest
    steps:
    - name: Fill in the new image ID in the testing task definition
      run: |
        sed -e "s|<IMAGE_URI>|${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}|g" testing-task-definition.json > testings-task-definition-computed.json
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ steps.get_latest_release.outputs.new_version }}
    # Deploy on testing ECS
    - name: Deploy to testing ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: testing-task-definition-computed.json
        service: testing-service
        cluster: testing-cluster
        wait-for-service-stability: true
      env:
        AWS_REGION: eu-central-1
  deploy-production:
    needs: deploy-testing
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Fill in the new image ID in the production task definition
        run: |
          sed -e "s|<IMAGE_URI>|${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}|g" production-task-definition.json > production-task-definition-computed.json
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.get_latest_release.outputs.new_version }}

      # Deploy on production ECS (manual approval)
      - name: Deploy to Production ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: production-task-definition-computed.json
          service: production-service
          cluster: production-cluster
          wait-for-service-stability: true
        env:
          AWS_REGION: eu-central-1